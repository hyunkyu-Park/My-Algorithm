
예를 들어 5개의 데이터로 구성된 수열 {10, 20, 30, 40, 50}이 있을 때, 두 번째 수부터 네 번째 수까지의 합은 20+30+40으로 90이 된다.  
이처럼 특정 구간을 구할 때 매번 for loop을 사용해 index x1~x2까지 돌린다면 시간 복잡도가 커진다.  
만약 전체 리스트의 구간 합을 모두 계산하라고 했을 때(첫 번째 수부터 N번째 수까지) 결과적으로 O(NM)의 시간 복잡도를 갖는다.  
이를 해결하기 위해 한 번의 for loop으로 기존 리스트의 수들의 순차적인 합을 다른 리스트로 만들어 값만 빼버리면 훨씬 효율적이다.  

구간 합 빠르게 계산하기 알고리즘  
ㆍ 1. N개의 수에 대해서 접두사 합(Prefix Sum)을 계산하여 배열 P에 저장한다.  
ㆍ 2. 매 M개의 쿼리 정보 [L, R]을 확인할 때, 구간합은 P[R] - P[L-1]이다.  

Ex) 두 번째 수부터 다섯 번째 수의 합 = P[5] - P[2-1] = 150 - 10 = 140  
이처럼 매 요청이 들어왔을 때, P[R] - P[L-1]을 계산하면 바로 구간 합을 구할 수 있게 된다.  
따라서 구간의 합을 구하는 시간 복잡도는 매 번 O(1)을 갖는다. 결과적으로 N개의 데이터와 M개의 쿼리가 있을 때, 전체 구간 합을 모두 계산하는 작업은 O(N+M)의 시간 복잡도를 갖는다.  

구현

# 데이터의 개수 N과 전체 데이터 선언
n = 5
data = [10, 20, 30, 40, 50]

# 접두사 합(Prefix_Sum) 배열 계산
sum_value = 0
prefix_sum = [0]
for i in data:
    sum_value += i
    prefix_sum.append(sum_value)

# 구간합 계산
left = 3
right = 4
print(prefix_sum[right] - prefix_sum[left - 1])

###
70
###
